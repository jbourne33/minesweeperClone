Tasks to complete in the HelloMinesweeper Project
*********************************************************

GENERAL:
    -TODO: Setup you JavaFX project in IntelliJ, and immediately check all files from your source directory into a .git repository. Push your repository to gitlab and add me as a member to your project (a reporter has sufficient access).

    -TODO: Contains: [Extra Credit!] You may choose to include a timer that keeps track of how long the user spends on the level.

    -TODO: As cells are (left) clicked, they should reveal themselves with one of:
    	• a blank (or darker) exposed area if they are not adjacent to any bombs
    	• a number 1-8 indicating the number of bombs the cell is adjacent to
    	• a bomb indicating the user clicked on a bomb and the game is over
    	• right clicks on cells that are marked (see below) should be ignored
    -TODO: Left clicking should mark a cell as a bomb (X’s) in image below, or if the cell is already marked with an X, it should remove the mark from the cell.
    -TODO: As cells are revealed, the unexposed cell counter should update itself, counting down towards zero.


MODEL:
    •TODO: The model should track which cells are marked, which cells are exposed, and which cells hide bombs. It should also store (or compute) the number of mines adjacent to a given cell.
public class Minesweeper:




public class  Minefield:
    PROPERTIES:
        private int[][] minefield
        private int Line, Column
        Random random, = new Random()
        boolean finish = false
        boolean win = false
        int turn = 0


    METHODS:
        -TODO: public boolean mark(int column, int row)
        -TODO: public int expose(int column, int row)
            - A call to expose() should return:
            - 0 if a cell was safely exposed and no bombs are adjacent to it. In this case, the all adjacent cells with 0 adjacent bombs should also be exposed. These newly revealed neighbors s can be revealed by call(s) to isExposed
            - 1-8 if a cell was safely exposed and 1 or more bombs is adjacent to it
            - -1 If a bomb was exposed at the game is over.
			- The model should ignore calls to expose a cell if the cell is already marked
        -TODO: public int isExposed(int column, int row)
        -TODO: public int unexposedCount()
            - At any point in time a call to unexposedCount() should return how many cells can be exposed without setting off a bomb



VIEW:
    -TODO: Contains: A choice-box that allows the user to select one of at least three levels of difficulty (in the screen shot above, this element lives in the upper left corner).
    -TODO: Contains: A start/restart button that when pressed (re)starts the game with a board sized based on the level of difficulty.
    -TODO: Contains: An unexposed cell counter (upper right corner of screen shot above). When the game begins the counter should display the cells that do not hide a bomb. As the user progressively exposes cells, this counter will decrease to 0. If the user exposes a bomb before the counter arrives at 0, the game is over and the player loses. If the counter reaches 0 without the player exposing a bomb, the player wins, and a win message should be displayed (for the counter text)


CONTROLLER:

    -TODO: The Controller should create a new MineField Model in response to the programs initialization or in response to a press of the “start” button
    -TODO: The Controller should call a mark method in the MineField object to toggle a cells marked status in response to a left mouse click
    -TODO: The Controller should call a expose method in the MineField object to expose a cell in response to a right mouse click
    -TODO: The Controller should update the View in response to mark/expose/start requests.


TURN IT IN:

 -TODO: Tar up your src folder including your .git folder and email it to me. Be sure that your Main.java file includes your name, and that your tarfile includes your name as well.

